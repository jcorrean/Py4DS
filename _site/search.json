[
  {
    "objectID": "Py4DS.html",
    "href": "Py4DS.html",
    "title": "Analítica de Proyectos",
    "section": "",
    "text": "Hay varias razones que nos obligan a considerar otras opciones más allá de Excel y de Microsoft Project que suelen ser las herramientas más populares para la gestión de proyectos.\n\nExcel es limitado a la hora abrir archivos con datos que están en el orden de los millones de filas o columnas.\nMicrosoft Project es un software licenciado (no libre) orientado al control de proyectos y no nos permite saber los pequeños cambios que pueden ocurrir en el transcurso de cualquier proyecto.\nNi Excel ni Project son útiles para analizar “datos no estructurados” tales como colecciones de documentos, fotos, videos, o audios. En cambio los datos no estructurados son analizables con Python y R de una forma más ágil.\nEl análisis de datos no estructurados es la base fundamental de herramientas como el aprendizaje automático (conocido en inglés como Machine Learning). Veamos algunas funcionalidades básicas en las llamadas ciencias de datos para entender cómo funciona Python. Una cruda realidad es que las personas encargadas de recolectar datos no son especialistas en estadística y por ello no suelen guardar los datos de una manera que sean directamente usables para fines analíticos. Parte de lo que veremos en las próximas subsecciones está tomado del libro de texto de Hathaway y Larson (2021) quienes se inspiraron en la “biblia” de la ciencia de datos escrita por Wickham y Grolemund (2017).\n\n\n\nPandas es una librería para Python que está diseñada para realizar tareas relacionadas con la lectura, edición, y manipulación de datos estructurados.\nLas siguientes seis tablas contienen exactamente la misma información pero dicha info está dispuesta de manera diferente.\n\nimport pandas as pd\nimport numpy as np\nimport bz2\nimport glob\n\n# Get a list of all .bz2 files in the directory\nfile_list = glob.glob(\"*.bz2\")\n\nfor file in file_list:\n    try:\n        with bz2.open(file, 'rb') as f:\n            # Start with a smaller chunksize to avoid memory issues\n            for chunk in pd.read_csv(f, chunksize=10000):\n                print(chunk.shape)  # Check if chunks are being processed\n\n                # Save each chunk to a separate file\n                chunk.to_csv(f\"chunk_{file}_{chunk.index[0]}.csv\", index=False)\n    except Exception as e:  # Catch potential errors\n        print(f\"Error processing file {file}: {e}\")"
  },
  {
    "objectID": "Py4DS.html#organización-de-datos-con-pandas",
    "href": "Py4DS.html#organización-de-datos-con-pandas",
    "title": "Analítica de Proyectos",
    "section": "",
    "text": "Pandas es una librería para Python que está diseñada para realizar tareas relacionadas con la lectura, edición, y manipulación de datos estructurados.\nLas siguientes seis tablas contienen exactamente la misma información pero dicha info está dispuesta de manera diferente.\n\nimport pandas as pd\nimport numpy as np\nimport bz2\nimport glob\n\n# Get a list of all .bz2 files in the directory\nfile_list = glob.glob(\"*.bz2\")\n\nfor file in file_list:\n    try:\n        with bz2.open(file, 'rb') as f:\n            # Start with a smaller chunksize to avoid memory issues\n            for chunk in pd.read_csv(f, chunksize=10000):\n                print(chunk.shape)  # Check if chunks are being processed\n\n                # Save each chunk to a separate file\n                chunk.to_csv(f\"chunk_{file}_{chunk.index[0]}.csv\", index=False)\n    except Exception as e:  # Catch potential errors\n        print(f\"Error processing file {file}: {e}\")"
  }
]